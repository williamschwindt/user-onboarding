{"ast":null,"code":"import _slicedToArray from \"/Users/william/Desktop/Lambda Work/user-onboarding/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/william/Desktop/Lambda Work/user-onboarding/src/components/UserForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst UserForm = ({\n  errors,\n  touched,\n  values,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  useEffect(() => {\n    status && setUsers(user => [...user, status]);\n  }, [status]);\n\n  const termsHandler = term => {\n    if (term === true) {\n      return 'Terms were accepted';\n    } else return 'Terms were not accepted';\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Name\",\n    value: values.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"email\",\n    type: \"text\",\n    placeholder: \"Email\",\n    value: values.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"password\",\n    type: \"text\",\n    placeholder: \"Password\",\n    value: values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"terms\",\n    value: values.terms,\n    onClick: this.checked = !this.checked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Submit\")), users.map((user, key) => {\n    return React.createElement(\"div\", {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, user.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, user.email), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, user.password), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, termsHandler(user.terms)));\n  }));\n};\n\nconst FormikUserForm = withFormik({\n  mapPropsToValues() {\n    return {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      terms: false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"This is required\"),\n    email: Yup.string().required(\"This is required\"),\n    password: Yup.string().required(\"This is required\"),\n    terms: Yup.bool()\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setStatus\n  }) {\n    console.log(\"Form Values: \", values);\n    axios.post(\"https://reqres.in/api/users\", values).then(res => {\n      console.log(\"Posted Data: \", res);\n      setStatus(res.data);\n      resetForm();\n    });\n  }\n\n})(UserForm);\nexport default FormikUserForm;","map":{"version":3,"sources":["/Users/william/Desktop/Lambda Work/user-onboarding/src/components/UserForm.js"],"names":["React","useState","useEffect","Form","Field","withFormik","Yup","axios","UserForm","errors","touched","values","status","users","setUsers","user","termsHandler","term","name","email","password","terms","checked","map","key","id","FormikUserForm","mapPropsToValues","validationSchema","object","shape","string","required","bool","handleSubmit","resetForm","setStatus","console","log","post","then","res","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst UserForm = ({ errors, touched, values, status }) => {\n    const [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        status && setUsers(user => [...user, status]);\n    }, [status]);\n\n\n    const termsHandler = (term) => {\n        if (term === true) {\n            return 'Terms were accepted';\n        } else return 'Terms were not accepted';\n    };\n\n    return (\n        <div>\n            <Form>\n                <Field name=\"name\" type=\"text\" placeholder=\"Name\" value={values.name}/>\n                <Field name=\"email\" type=\"text\" placeholder=\"Email\" value={values.email}/>\n                <Field name=\"password\" type=\"text\" placeholder=\"Password\" value={values.password}/>\n                <label><Field type=\"checkbox\" name=\"terms\" value={values.terms} onClick={this.checked=!this.checked}/></label>\n\n                <button type=\"submit\">Submit</button>\n            </Form>\n\n            {users.map((user, key) => {\n                return (\n                    <div key={user.id}>\n                        <h2>{user.name}</h2>\n                        <p>{user.email}</p>\n                        <p>{user.password}</p>\n                        <p>{termsHandler(user.terms)}</p>\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nconst FormikUserForm = withFormik({\n    mapPropsToValues() {\n        return {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            terms: false\n        };\n    },\n\n    validationSchema: Yup.object().shape({\n        name: Yup.string().required(\"This is required\"),\n        email: Yup.string().required(\"This is required\"),\n        password: Yup.string().required(\"This is required\"),\n        terms: Yup.bool()\n    }),\n\n    handleSubmit(values, {resetForm, setStatus}) {\n        console.log(\"Form Values: \", values);\n\n        axios\n            .post(\"https://reqres.in/api/users\", values)\n\n            .then(res => {\n                console.log(\"Posted Data: \", res);\n                setStatus(res.data);\n                resetForm();\n            })\n    }\n})(UserForm);\n\nexport default FormikUserForm;"]},"metadata":{},"sourceType":"module"}